#!/usr/bin/env python3
#
# Intel AMT wsman command line interface
#

import argparse
import logging
import os
import sys

from amt.power import AMTPower, power_string_from_state, power_state_from_string

# -----------------------------------------------------------------------------
# Main entry point

if __name__ == "__main__":
    desc = """
Intel AMT commandline interface.

The hostname, password  and username (if necessary) need to be supplied via the
commandline or, alternatively, with environment variables AMT_HOST, AMT_USER
and AMT_PASSWORD.
"""
    parser = argparse.ArgumentParser(description=desc, formatter_class=
                                     argparse.RawDescriptionHelpFormatter)
    parser.add_argument("action", choices=["power-state", "power-on",
                                           "power-off", "power-cycle",
                                           "reset", "nmi"])
    parser.add_argument("host", metavar="[protocol://]host[:port]", nargs='?',
                        default=os.getenv("AMT_HOST", ""),
                        help="AMT host and (optional) protocol and port "
                        "number. If not specified, protocol defaults to "
                        "'http' and port defaults to '16992'.")
    parser.add_argument("password", nargs='?',
                        default=os.getenv("AMT_PASSWORD", ""),
                        help="AMT password.")
    parser.add_argument("-u", "--user", default=os.getenv("AMT_USER", "admin"),
                        help="AMT username. If not specified, defaults to "
                        "'admin'.")
    parser.add_argument("-v", "--verbose", action="store_true",
                        help="Enable verbose output.")
    args = parser.parse_args()

    if not args.host or not args.password:
        parser.print_help()
        sys.exit(2)

    level = logging.DEBUG if args.verbose else logging.INFO
    logging.basicConfig(level=level, format="%(asctime)s: %(message)s",
                        datefmt="%b %d %H:%M:%S")

    power = AMTPower(args.host, args.user, args.password)

    if args.action == "power-state":
        print(power_string_from_state(power.get_power_state()))

    else:
        state = args.action
        if state.startswith("power-"):
            state = state[6:]
        power.set_power_state(power_state_from_string(state))
